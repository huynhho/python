def change(n,x,y,z):
	if n==1:
		print (y,x,z)
	else:
		print (n-1,x,x,x,y,y,y,z,z,z)
print(change(100,'hoan','cute','handsome'))
print(change(1,'is','hoan','handsome'))

def changeposition(x,y):
	x == x + 1

	return (x,y)
print(changeposition(2,3))






# Python Object_Oriented Programming


class Employee:
	pass

emp_1 = Employee()
emp_2 = Employee()

print (emp_1)
print (emp_2)

emp_1.firt = 'Hoan'
emp_1.last = 'Huynh'
emp_1.email = 'vanhoan2006@gmail.com'
emp_1.pay =  500000

emp_2.firt = 'Test'
emp_2.last = 'user'
emp_2.email = 'Test.User@gmail.com'
emp_2.pay =  600000

print(emp_1.email)
print(emp_2.email)






# Python Object_Oriented Programming


class Employee:
	
	raise_amt = 1.04
	def __init__(self, first, last, pay):
		self.first = first
		self.last = last
		self.pay = pay
		self.email = first + '.' + last + '@email.com'
		#self.fullname = first +  ' ' + last
		#self.appy_raise = pay * 1.04
	def fullname(self):
		return '{} {}'.format(self.first, self.last)

	def apply_raise(self):
		self.pay = int(self.pay  * self.raise_amt)

class Developer(Employee):
	raise_amt = 1.10

	def __init__(self, first, last, pay, prog_lang):
	    super(). __init__( first, last, pay)
	    self.prog_lang = prog_lang

class Manager(Employee):
	def __init__(self, first, last, pay, employees = None):
	    super(). __init__( first, last, pay)
	    if employees is None:
	    	self.employees = []
	    else:
	    	self.employees = employees
	    #print(self.employees)
	def add_emp(self, emp):
		if emp not in self.employees:
			self.employees.append(emp)

	def remove_emp(self, emp):
		if emp in self.employees:
			self.employees.remove(emp)

	def print_emps(self):
		for emp in self.employees:
			print('-->', emp.fullname() )


dev_1 = Developer('Corey','Schafer', 50000, 'Python' )
dev_2 = Developer('Test','Employee', 60000, 'Java' )
dev_3 = Developer('Hoan', 'Huynh', 70000, 'C++')

mgr_1 = Manager('Sue', 'Smith', 90000, [dev_1])


print(mgr_1.email)
mgr_1.add_emp(dev_2)
mgr_1.add_emp(dev_3)

mgr_1.print_emps()
print(dev_1.prog_lang)




class student:
# "" A class representing a student"
	def __init__(self, n, a):
		self.full_name = n
		self.age = a

	def get_age(self):
		return self.age

b = student("Bob", 21)
print(b.full_name)
print(b.get_age())
print(getattr(b, "full_name"))